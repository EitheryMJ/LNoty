import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Expanse import Expanse
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot)

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

# lair of antharas buttons
inline_loa_buttons = types.InlineKeyboardMarkup()

b6 = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='expanse_setloa')
b7 = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='expanse_removeloa')

inline_loa_buttons.add(b6, b7)


# LAIR OF ANTHARAS SETTINGS
@dp.message_handler(commands=['expanse_loa'])
async def expanse_about_loa(message: types.Message):
    await message.answer('–í—Å–µ–º–∏—Ä–Ω–∞—è –∑–æ–Ω–∞ –õ–æ–≥–æ–≤–æ –ê–Ω—Ç–∞—Ä–∞—Å–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤'
                         ' –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Å—Ä–µ–¥—É c 18:00 –¥–æ –ø–æ–ª—É–Ω–æ—á–∏.\n',
                         reply_markup=inline_loa_buttons)


@dp.callback_query_handler(filters.Text(contains='expanse_setloa'))
async def expanse_set_loa(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Expanse).filter_by(id_user=user.telegram_id).first()
    setting.loa = True

    session.commit()
    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –õ–æ–≥–æ–≤–∞ –ê–Ω—Ç–∞—Ä–∞—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='expanse_removeloa'))
async def expanse_remove_loa(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Expanse).filter_by(id_user=user.telegram_id).first()
    setting.loa = False

    session.commit()
    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –õ–æ–≥–æ–≤–∞ –ê–Ω—Ç–∞—Ä–∞—Å–∞ —É–±—Ä–∞–Ω–æ')
    await callback_query.answer()


async def expanse_loa_notification_wrapper():

    session = Session()
    users = session.query(User).all()
    for user in users:
        setting = session.query(Expanse).filter_by(id_user=user.telegram_id).first()
        if setting.loa is True:
            await expanse_loa_notification(user)
    session.close()


async def expanse_loa_notification(user: User):
    now = datetime.now().strftime('%H:%M')
    if now == '17:55':
        await mybot.send_message(user.telegram_id, 'üî•üî• –õ–æ–≥–æ–≤–æ –ê–Ω—Ç–∞—Ä–∞—Å–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç')
        print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –õ–æ–≥–æ–≤–µ –ê–Ω—Ç–∞—Ä–∞—Å–∞')
    else:
        print(now, '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –õ–æ–≥–æ–≤–∞ –ê–Ω—Ç–∞—Ä–∞—Å–∞')
