import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import RuoffCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from Commands.options import options_menu_text


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class TrainingTime(StatesGroup):
    waiting_for_training_time = State()


# training buttons
inline_training_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_training')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_training')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_training')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_training')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_training')

inline_training_buttons.add(button_set, button_remove)


# training SETTINGS
@dp.message_handler(commands=['training'])
async def about_training(message: types.Message):
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            if not option_setting:
                option = RuoffCustomSetting(id_user=user.telegram_id)
                session.add(option)
                session.commit()

        text = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –ü–æ–¥–∑–µ–º–µ–ª—å–µ ‚Äî –æ—Å–æ–±–∞—è –∑–æ–Ω–∞ –æ—Ö–æ—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç 76 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ. –í–æ–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ'\
               ' –¥–∞–µ—Ç—Å—è 1 —á–∞—Å (–æ—Ç—á–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞ –≤ –∑–æ–Ω—É).\n'\
               '\n'\
               '!!–°–ª–µ–¥—É–µ—Ç –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —ç—Ç–æ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∑–æ–Ω–∞, –∏ –≤—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, '\
               '—á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∑–∞–π—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≤–∞–ª–∞–∫–∞—Å–∞ –∏–ª–∏ –∏–≤–µ–Ω—Ç —Å —É–±–∏–π—Å—Ç–≤–æ–º —ç–ø–∏–∫–æ–≤, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è - –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.\n'\
               '\n'\
               '–í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø–æ—Ç –∏ –∑–∞ 1500 —Ä—É–¥—ã –¥—É—Ö–∞ –∑–∞–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞—Ñ—Ñ = \n'\
               '—á–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–∞, –≥–¥–µ –Ω–∏–∫—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç, –Ω–∏–∫—Ç–æ –Ω–µ –ø–∫–∞—à–∏—Ç –∏ –≤—Å–µ –º–æ–±—ã –ø—Ä–µ–Ω–∞–∂–ª–µ–∂–∞—Ç —Ç–µ–±–µ.\n'\
               '\n'\
               '–ó–∞ 10 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ë–æ—Å—Å. \n'\
               '–ü–æ–¥—Å–∫–∞–∑–∫–∞ ‚Ññ1: –µ—Å–ª–∏ –≤ 10:30 –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏, —É –ù–ü–° –ì—Ä–æ—É–Ω –ø–æ–º–µ–Ω—è—Ç—å –∑–æ–Ω—É –Ω–∞ –¢–û–ò12, '\
               '–≤ 09:59 —É —Ç–æ–≥–æ –∂–µ –ù–ü–° –ì—Ä–æ—É–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ—é –∑–æ–Ω—É, —Ç–æ –≤–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ—Å—Å –≤ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ. '\
               '–° –Ω–µ–≥–æ —Å—ã–ø–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å—è–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ. –ö–æ–Ω–µ—á–Ω–æ, —Ç–æ–ª—å–∫–æ —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –Ω–µ –æ—Ç–∫–∏–Ω–µ—Ç–µ—Å—å ü´∂\n'\
               '–ü–æ–¥—Å–∫–∞–∑–∫–∞ ‚Ññ2: –µ—Å–ª–∏ –∑–∞–π—Ç–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ö–æ—Ç—Ç–∞–π–º –∑–∞—á–∏—Å—Ç–∫–∏, –º–æ–∂–Ω–æ –∑–∞–ª—É—Ç–∞—Ç—å –∫–ª—é—á–∏–∫–∏ –∏–∑ —Ç–µ—Ö –ª–æ–∫–∞—Ü–∏–π, '\
               '–≥–¥–µ –æ–±—ã—á–Ω–æ –º–µ—Å—Ç –Ω–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Ä–∫–∞—Ö. –ê —Å –±–æ—Å—Å–∞ —Ç–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏, –∫ —Å–ª–æ–≤—É, –æ—á–∫–æ–≤ –∑–∞—á–∏—Å—Ç–∫–∏ —Å—ã–ø–µ—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ.'

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_training_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_training: {e}')


# SELECT MENU FOR training TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_training'))
async def set_training(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ü–æ–¥–∑–µ–º–µ–ª—å—è üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_training: {e}')


# CANCEL MENU training TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_training'))
async def cancel_to_set_training(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_training: {e}')


# INPUT training TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_training'))
async def set_training_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ü–æ–¥–∑–µ–º–µ–ª—å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:24): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await TrainingTime.waiting_for_training_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_training_time: {e}')


# SAVE training TIME
@dp.message_handler(state=TrainingTime.waiting_for_training_time)
async def save_training_time(message: types.Message, state: FSMContext):
    try:
        training = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(training) == 5 and training[:2] in hours and training[2] == ':' and training[3:5] in minutes:
            with Session() as session:
                user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
                
                option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
                option_setting.training = training
                session.commit()
    
                user.upd_date = datetime.today()
                session.commit()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ü–æ–¥–∑–µ–º–µ–ª—å—è - {training}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_training_time: {e}')


# CANCEL SET training TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_training',
                           state=TrainingTime.waiting_for_training_time)
async def cancel_to_set_training_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_training_time: {e}')


# REMOVE training TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_training'))
async def remove_training(callback_query: types.CallbackQuery):
    try:
        with Session() as session:

            user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
            option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.training = None
    
            session.commit()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –ü–æ–¥–∑–µ–º–µ–ª—å–µ —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_training: {e}')


# SELECT USER WITH TRUE SETTING
async def training_notification_wrapper():
    try:
        with Session() as session:
            users = session.query(User).all()
    
            for user in users:
                option = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
                if option and option.training:
                    await training_notification(user)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[training] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ training_notification_wrapper: {e}')


# SEND training MESSAGE
async def training_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')

        with Session() as session:
            option = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()

        training = option.training if option.training else None
        # –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è –∏ –Ω–µ –º–µ—Å—Ç–æ
        if training and now != training:
            return      
                
        # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
        elif training and now == training:
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –ü–æ–¥–∑–µ–º–µ–ª—å–µ –∂–¥–µ—Ç. '
                    '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–æ—á–Ω–æ–≥–æ –±–æ—Å—Å–∞ –¥–æ 10:00!'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –ü–æ–¥–∑–µ–º–µ–ª—å–µ')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(
            chat_id='952604184',
            text=f'[training] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ training_notification: {e}'
        )
