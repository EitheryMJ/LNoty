import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import EssenceCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from Commands.options import options_menu_text


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class ToiTime(StatesGroup):
    waiting_for_toi_time = State()


# toi buttons
inline_toi_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_toi')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_toi')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_toi')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_toi')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_toi')

inline_toi_buttons.add(button_set, button_remove)


# toi SETTINGS
@dp.message_handler(commands=['toi'])
async def about_toi(message: types.Message):
    try:
        with Session() as session:

          user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
          option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
          if not option_setting:
              option = EssenceCustomSetting(id_user=user.telegram_id)
              session.add(option)
              session.commit()

        text = '–ë–∞—à–Ω—è –î–µ—Ä–∑–æ—Å—Ç–∏ ‚Äî –º–µ–∂—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –æ—Ö–æ—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç 80 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ.\n'\
               '–í –¢–û–ò –º–æ–∂–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ - –û—Ö–æ—Ç–∞ –≤ –ë–∞—à–Ω–µ –î–µ—Ä–∑–æ—Å—Ç–∏ - –∑–∞ —É–±–∏–π—Å—Ç–≤–æ 100 –º–æ–±–æ–≤ '\
               '—Å –∑–µ–ª–µ–Ω—ã–º —Ç–∏—Ç—É–ª–æ–º –¥–∞–¥—É—Ç 2 –ø–ª–∞—â–∞ –∑–∞—â–∏—Ç—ã\n'\
               '–ù–æ —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤ –ë–∞—à–Ω–µ –î–µ—Ä–∑–æ—Å—Ç–∏ - –æ–ø—ã—Ç –∏ –∞–¥–µ–Ω–∞ —Ü–µ–ª—ã—Ö 14 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_toi_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_toi: {e}')


# SELECT MENU FOR toi TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_toi'))
async def set_toi(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ë–∞—à–Ω–∏ –î–µ—Ä–∑–æ—Å—Ç–∏ üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_toi: {e}')


# CANCEL MENU toi TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_toi'))
async def cancel_to_set_toi(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_toi: {e}')


# INPUT toi TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_toi'))
async def set_toi_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ë–∞—à–Ω–∏ –î–µ—Ä–∑–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:24): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await ToiTime.waiting_for_toi_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_toi_time: {e}')


# SAVE toi TIME
@dp.message_handler(state=ToiTime.waiting_for_toi_time)
async def save_toi_time(message: types.Message, state: FSMContext):
    try:
        toi = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(toi) == 5 and toi[:2] in hours and toi[2] == ':' and toi[3:5] in minutes:
            with Session() as session:

                user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
                option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
                option_setting.toi = toi
                session.commit()
    
                user.upd_date = datetime.today()
                session.commit()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ë–∞—à–Ω–∏ –î–µ—Ä–∑–æ—Å—Ç–∏ - {toi}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_toi_time: {e}')


# CANCEL SET toi TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_toi',
                           state=ToiTime.waiting_for_toi_time)
async def cancel_to_set_toi_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_toi_time: {e}')


# REMOVE toi TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_toi'))
async def remove_toi(callback_query: types.CallbackQuery):
    try:
        with Session() as session:

            user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.toi = None
    
            session.commit()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ë–∞—à–Ω–µ –î–µ—Ä–∑–æ—Å—Ç–∏ —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_toi: {e}')


# SELECT USER WITH TRUE SETTING
async def toi_notification_wrapper():
    try:
        with Session() as session:
            users = session.query(User).all()
    
            for user in users:
                if user.server == 'ruoff':
                    option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
                    if option and option.toi:
                        await toi_notification(user)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[toi] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ toi_notification_wrapper: {e}')


# SEND toi MESSAGE
async def toi_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')

        with Session() as session:
            option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()

        toi = option.toi if option.toi else None
        # –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è –∏ –Ω–µ –º–µ—Å—Ç–æ
        if toi and now != toi:
            return      
              
        # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
        elif toi and now == toi:
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–ù–µ –∑–∞–±—É–¥—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¢–û–ò - —Ç–∞–º –∫–ª–∞—Å—Å–Ω–æ!'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ë–∞—à–Ω–µ –î–µ—Ä–∑–æ—Å—Ç–∏')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(
            chat_id='952604184',
            text=f'[toi] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ toi_notification: {e}'
        )
