import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import RuoffCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from Commands.options import options_menu_text


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class GoddardTime(StatesGroup):
    waiting_for_goddard_time = State()


# goddard buttons
inline_goddard_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_goddard')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_goddard')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_goddard')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_goddard')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_goddard')

inline_goddard_buttons.add(button_set, button_remove)


# goddard SETTINGS
@dp.message_handler(commands=['goddard'])
async def about_goddard(message: types.Message):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
        if not option_setting:
            option = RuoffCustomSetting(id_user=user.telegram_id)
            session.add(option)
            session.commit()
        session.close()

        text = '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ì–æ–¥–¥–∞—Ä–¥–∞ - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç 85 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ.\n'\
               '–¶–µ–ª—å: —É–±–∏—Ç—å 1000 –º–æ–Ω—Å—Ç—Ä–æ–≤\n'\
               '–ù–∞–≥—Ä–∞–¥–∞: –¥—Ä–µ–≤–Ω—è—è –∞–¥–µ–Ω–∞ —Ö100\n'\
               '–õ–æ–∫–∞—Ü–∏—è:\n'\
               '- –ì–æ—Ä—è—á–∏–µ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ 85~87\n'\
               '- –ö–∞–Ω—å–æ–Ω –ì–æ—Ä–¥–∞ 87~90\n'\
               '- –ö—Ä–µ–ø–æ—Å—Ç—å –§–∞–≤–Ω–æ—Å–æ–≤ 90~92\n'\
               '- –í–æ–µ–Ω–Ω–∞—è –ë–∞–∑–∞ –ú–æ—Ä–≥–æ—Å–∞ 90~92\n'

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_goddard_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_goddard: {e}')


# SELECT MENU FOR goddard TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_goddard'))
async def set_goddard(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ì–æ–¥–¥–∞—Ä–¥–∞ üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_goddard: {e}')


# CANCEL MENU goddard TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_goddard'))
async def cancel_to_set_goddard(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_goddard: {e}')


# INPUT GARDENS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_goddard'))
async def set_goddard_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ì–æ–¥–¥–∞—Ä–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:24): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await GoddardTime.waiting_for_goddard_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_goddard_time: {e}')


# SAVE goddard TIME
@dp.message_handler(state=GardensTime.waiting_for_goddard_time)
async def save_goddard_time(message: types.Message, state: FSMContext):
    try:
        goddard = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(goddard) == 5 and goddard[:2] in hours and goddard[2] == ':' and goddard[3:5] in minutes:
            session = Session()

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

            option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.goddard = goddard
            session.commit()

            user.upd_date = datetime.today()
            session.commit()

            session.close()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ì–æ–¥–¥–∞—Ä–¥–∞ - {goddard}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_goddard_time: {e}')


# CANCEL SET goddard TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_goddard',
                           state=GardensTime.waiting_for_goddard_time)
async def cancel_to_set_goddard_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_goddard_time: {e}')


# REMOVE goddard TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_goddard'))
async def remove_goddard(callback_query: types.CallbackQuery):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
        option_setting.goddard = None

        session.commit()
        session.close()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ì–æ–¥–¥–∞—Ä–¥–∞ —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_goddard: {e}')


# SELECT USER WITH TRUE SETTING
async def goddard_notification_wrapper():
    try:
        session = Session()
        users = session.query(User).all()

        for user in users:
            option = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            if option and option.goddard:
                await goddard_notification(user)
        session.close()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[goddard] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ goddard_notification_wrapper: {e}')


# SEND goddard MESSAGE
async def goddard_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')

        with Session() as session:
            option = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()

        goddard = option.goddard if option.goddard else None
        # –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è –∏ –Ω–µ –º–µ—Å—Ç–æ
        if goddard and now != goddard:
            return      
                
         # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
        elif goddard and now == goddard:
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–ü–æ—Ä–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ì–æ–¥–¥–∞—Ä–¥.\n'
                    '–ó–∞–¥–∞—á–∞: —É–±–∏—Ç—å 1000 –º–æ–±–æ–≤ –∏ –∑–∞–ª—É—Ç–∞—Ç—å 100 –∞–Ω—Ç–∏—á–∫–∏'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ì–æ–¥–¥–∞—Ä–¥–∞')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(
            chat_id='952604184',
            text=f'[goddard] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ goddard_notification: {e}'
        )
