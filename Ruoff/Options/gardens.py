import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import EssenceCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from Commands.options import options_menu_text
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU')


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class GardensTime(StatesGroup):
    waiting_for_gardens_time = State()


# gardens buttons
inline_gardens_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_gardens')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_gardens')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_gardens')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_gardens')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_gardens')

inline_gardens_buttons.add(button_set, button_remove)


# GARDENS SETTINGS
@dp.message_handler(commands=['gardens'])
async def about_gardens(message: types.Message):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
        if not option_setting:
            option = EssenceCustomSetting(id_user=user.telegram_id)
            session.add(option)
            session.commit()
        session.close()

        text = '–ó–∞–±—ã—Ç—ã–µ —Å–∞–¥—ã ‚Äî –º–µ–∂—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –æ—Ö–æ—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç 76 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ. –í–æ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –°–∞–¥—ã'\
               ' –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∑–æ–Ω –æ—Ö–æ—Ç—ã:\n'\
               '\n'\
               '–ü–µ—Ä–≤–æ–±—ã—Ç–Ω—ã–π –ó–∞–±—ã—Ç—ã–π –°–∞–¥: –¢–∞–ª–∏—Å–º–∞–Ω –°–∫–æ—Ä–æ—Å—Ç–∏\n'\
               '–°–∞–¥—ã –ë–æ–≥–∏–Ω–∏ –ï–≤—ã: –¢–∞–ª–∏—Å–º–∞–Ω –ï–≤—ã\n'\
               '–°–∞–¥ –í–ª–∞—Å—Ç–∏—Ç–µ–ª—è: –¢–∞–ª–∏—Å–º–∞–Ω –í–ª–∞—Å—Ç–∏—Ç–µ–ª—è\n'\
               '\n'\
               '–° –æ—Å–æ–±—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ (–ó–µ–ª–µ–Ω—ã–π –¢–∏—Ç—É–ª) –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ö–Ω–∏–≥–∏ –ú–∞—Å—Ç–µ—Ä–∞ –∏ –¢–∞–ª–∏—Å–º–∞–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω—ã'      

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_gardens_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_gardens: {e}')


# SELECT MENU FOR GARDENS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_gardens'))
async def set_gardens(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ó–∞–±—ã—Ç–æ–≥–æ –°–∞–¥–∞ üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_gardens: {e}')


# CANCEL MENU GARDENS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_gardens'))
async def cancel_to_set_gardens(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_gardens: {e}')


# INPUT GARDENS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_gardens'))
async def set_gardens_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ó–∞–±—ã—Ç—ã—Ö –°–∞–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:24): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await GardensTime.waiting_for_gardens_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_gardens_time: {e}')


# SAVE GARDENS TIME
@dp.message_handler(state=GardensTime.waiting_for_gardens_time)
async def save_gardens_time(message: types.Message, state: FSMContext):
    try:
        gardens = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(gardens) == 5 and gardens[:2] in hours and gardens[2] == ':' and gardens[3:5] in minutes:
            session = Session()

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.gardens = gardens
            session.commit()

            user.upd_date = datetime.today()
            session.commit()

            session.close()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ó–∞–±—ã—Ç—ã—Ö –°–∞–¥–æ–≤ - {gardens}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_gardens_time: {e}')


# CANCEL SET GARDENS TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_gardens',
                           state=GardensTime.waiting_for_gardens_time)
async def cancel_to_set_gardens_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_gardens_time: {e}')


# REMOVE GARDENS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_gardens'))
async def remove_gardens(callback_query: types.CallbackQuery):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
        option_setting.gardens = None

        session.commit()
        session.close()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ó–∞–±—ã—Ç—ã—Ö –°–∞–¥–∞—Ö —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_gardens: {e}')


# SELECT USER WITH TRUE SETTING
async def gardens_notification_wrapper():
    try:
        session = Session()
        users = session.query(User).all()

        for user in users:
            option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            if option and option.gardens:
                await gardens_notification(user)
        session.close()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[GARDENS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ gardens_notification_wrapper: {e}')


# SEND GARDENS MESSAGE
async def gardens_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')

        with Session() as session:
            option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()

        gardens = option.gardens if option.gardens else None
        # –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è –∏ –Ω–µ –º–µ—Å—Ç–æ
        if gardens and now != gardens:
            return      

        # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞       
        elif gardens and now == gardens and datetime.today().strftime('%A').lower() == '–≤—Ç–æ—Ä–Ω–∏–∫':
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–ó–∞–≤—Ç—Ä–∞ –ó–∞–±—ã—Ç—ã–µ –°–∞–¥—ã –æ–±–Ω–æ–≤—è—Ç—Å—è, —Ç—ã —Ç–æ—á–Ω–æ –¥–æ–±–∏–ª 1000 –º–æ–±–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∑–æ–Ω–µ?'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ó–∞–±—ã—Ç—ã—Ö –°–∞–¥–∞—Ö')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)
                
         # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
        elif gardens and now == gardens:
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–ó–∞–±—ã—Ç—ã–µ –°–∞–¥—ã –∂–¥—É—Ç —Å–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤. '
                    '–ó–∞–¥–∞—á–∞: –ø–æ—Å—Ç–æ—è—Ç—å —á–∞—Å –∏ –Ω–∞—Ñ–∞—Ä–º–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç '
                    '(100 –º–æ–±–æ–≤ —Å —Ç–∏—Ç—É–ª–æ–º) –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∑–æ–Ω–∞—Ö'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ó–∞–±—ã—Ç—ã—Ö –°–∞–¥–∞—Ö')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(
            chat_id='952604184',
            text=f'[GARDENS] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ gardens_notification: {e}'
        )
