import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import EssenceCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from Commands.options import options_menu_text


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class PaganTime(StatesGroup):
    waiting_for_pagan_time = State()


# pagan buttons
inline_pagan_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_pagan')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_pagan')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_pagan')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_pagan')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_pagan')

inline_pagan_buttons.add(button_set, button_remove)


# pagan SETTINGS
@dp.message_handler(commands=['pagan'])
async def about_pagan(message: types.Message):
    try:
        with Session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            if not option_setting:
                option = EssenceCustomSetting(id_user=user.telegram_id)
                session.add(option)
                session.commit()

        text = '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ö—Ä–µ–ø–æ—Å—Ç–∏ –ö–µ–ª—å–±–∏–º–∞ –∏ –Ø–∑—ã—á–µ—Å–∫–æ–≥–æ –•—Ä–∞–º–∞ ‚Äî –º–µ–∂—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç 85 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ. '\
               '–î–æ—Å—Ç—É–ø–Ω–∞ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É + –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–æ—Å–ª–µ 00:00 –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç 6-–π —Ä–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é.'\
               '–î–∞–µ—Ç—Å—è 10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é + –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º–æ–∂–Ω–æ –ª—É—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ö–æ–¥–∫–µ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ 300 –º–æ–±–æ–≤. '\
               '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –º–µ–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞—Ü–∏—è, –Ω–æ –ø—Ä–æ—Ö–æ–¥–∫–∏ –ø–∞–¥–∞—é—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞ –æ–±–µ –∑–æ–Ω—ã.'\

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_pagan_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_pagan: {e}')


# SELECT MENU FOR pagan TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_pagan'))
async def set_pagan(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ü–∞–≥–∞–Ω–∞ –∏ –ö–µ–ª—å–±–∏–º–∞ üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_pagan: {e}')


# CANCEL MENU pagan TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_pagan'))
async def cancel_to_set_pagan(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_pagan: {e}')


# INPUT pagan TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_pagan'))
async def set_pagan_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ü–∞–≥–∞–Ω–∞ –∏ –ö–µ–ª—å–±–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:24): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await PaganTime.waiting_for_pagan_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_pagan_time: {e}')


# SAVE pagan TIME
@dp.message_handler(state=PaganTime.waiting_for_pagan_time)
async def save_pagan_time(message: types.Message, state: FSMContext):
    try:
        pagan = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(pagan) == 5 and pagan[:2] in hours and pagan[2] == ':' and pagan[3:5] in minutes:
            with Session() as session: 

                user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
                option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
                option_setting.pagan = pagan
                session.commit()
    
                user.upd_date = datetime.today()
                session.commit()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ü–∞–≥–∞–Ω–∞ –∏ –ö–µ–ª—å–±–∏–º–∞ - {pagan}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_pagan_time: {e}')


# CANCEL SET pagan TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_pagan',
                           state=PaganTime.waiting_for_pagan_time)
async def cancel_to_set_pagan_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_pagan_time: {e}')


# REMOVE pagan TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_pagan'))
async def remove_pagan(callback_query: types.CallbackQuery):
    try:
        with Session() as session:

            user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.pagan = None
    
            session.commit()
            
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ü–∞–≥–∞–Ω–µ –∏ –ö–µ–ª—å–±–∏–º–µ —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_pagan: {e}')


# SELECT USER WITH TRUE SETTING
async def pagan_notification_wrapper():
    try:
        with Session() as session:
            users = session.query(User).all()
    
            for user in users:
                option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
                if option and option.pagan:
                    await pagan_notification(user)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[pagan] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ pagan_notification_wrapper: {e}')


# SEND pagan MESSAGE
async def pagan_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')

        with Session() as session:
            option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()

        pagan = option.pagan if option.pagan else None
        # –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è –∏ –Ω–µ –º–µ—Å—Ç–æ
        if pagan and now != pagan:
            return      

        # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
        elif pagan and now == pagan:
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–ü–æ—Ä–∞ –Ω–∞ –º–µ–∂—Å–µ—Ä–≤–µ—Ä - –ü–∞–≥–∞–Ω –∏–ª–∏ –ö–µ–ª—å–±–∏–º, —á—Ç–æ-—Ç–æ —Ç–∞–º —Ç–æ—á–Ω–æ –µ—Å—Ç—å.'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ü–∞–≥–∞–Ω–µ –∏ –ö–µ–ª—å–±–∏–º–∞')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(
            chat_id='952604184',
            text=f'[pagan] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ pagan_notification: {e}'
        )
