import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import EssenceCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from aiocron import crontab
from Commands.options import options_menu_text
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU')


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class ValakasTime(StatesGroup):
    waiting_for_valakas_time = State()


# valakas buttons
inline_valakas_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_valakas')
button_set_day = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å', callback_data='ruoff_option_set_day_valakas')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_valakas')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_valakas')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_valakas')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_valakas')

inline_valakas_buttons.add(button_set, button_remove)


# VALAKAS TEMP SETTINGS
@dp.message_handler(commands=['valakas'])
async def about_valakas(message: types.Message):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
        if not option_setting:
            option = EssenceCustomSetting(id_user=user.telegram_id)
            session.add(option)
            session.commit()
        session.close()

        text = '–•—Ä–∞–º –í–∞–ª–∞–∫–∞—Å–∞ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –æ—Ö–æ—Ç—ã –¥–ª—è 15+ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'\
               ' –æ—Ç 76 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ. –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –æ—Ç–∫–∞—Ç –∑–æ–Ω—ã –≤ —Å—Ä–µ–¥—É –≤ 6:30 –ø–æ –ú–°–ö.\n' \
               '\n' \
               '–í –∑–æ–Ω–µ –≤–∞—Å –∂–¥—É—Ç –º–æ–±—ã –∏ –ø–∞—Ä–æ—á–∫–∞ –±–æ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥—Ä–æ–ø–∞—é—Ç:\n' \
               '- –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—á–∫–∏\n' \
               '- –ö–∞–º–Ω–∏ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è\n' \
               '- –°–≤–∏—Ç–∫–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è\n' \
               '- –¢–æ–ø –ê —à–º–æ—Ç –∏ –≤–µ–∞–ø–æ–Ω\n' \
               '- –¢–æ—á–∫–∏ –ê –≤–µ–∞–ø–æ–Ω –∏ –∞—Ä–º–æ—Ä\n' \
               '\n'\
               'üî• –í –∫–æ–Ω—Ü–µ –∑–æ–Ω—ã –∂–¥–µ—Ç –ë–æ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç—Å—ã–ø–∞—Ç—å –¥—Ä–æ–ø–∞ –≤ –≤–∏–¥–µ –∫–Ω–∏–≥–∏ 4*'

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_valakas_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_valakas: {e}')


# SELECT MENU FOR VALAKAS TIME AND DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_valakas'))
async def set_valakas(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_day, button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞ üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas: {e}')


# CANCEL MENU VALAKAS TIME AND DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_valakas'))
async def cancel_to_set_valakas(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas: {e}')


# INPUT VALAKAS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_valakas'))
async def set_valakas_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:42): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await ValakasTime.waiting_for_valakas_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas_time: {e}')


# SAVE VALAKAS TIME
@dp.message_handler(state=ValakasTime.waiting_for_valakas_time)
async def save_valakas_time(message: types.Message, state: FSMContext):
    try:
        valakas_time = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(valakas_time) == 5 and valakas_time[:2] in hours\
                and valakas_time[2] == ':' and valakas_time[3:5] in minutes:
            session = Session()

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.valakas_time = valakas_time
            session.commit()

            user.upd_date = datetime.today()
            session.commit()

            session.close()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_day, button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞ - {valakas_time}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_valakas_time: {e}')


# CANCEL SET VALAKAS TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_valakas',
                           state=ValakasTime.waiting_for_valakas_time)
async def cancel_to_set_valakas_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas_time: {e}')


# INPUT VALAKAS DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_day_valakas'))
async def set_valakas_day(callback_query: types.CallbackQuery):
    try:
        button_mon = types.InlineKeyboardButton(text='–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='add_valakas_monday')
        button_tue = types.InlineKeyboardButton(text='–≤—Ç–æ—Ä–Ω–∏–∫', callback_data='add_valakas_tuesday')
        button_wed = types.InlineKeyboardButton(text='—Å—Ä–µ–¥–∞', callback_data='add_valakas_wednesday')
        button_thu = types.InlineKeyboardButton(text='—á–µ—Ç–≤–µ—Ä–≥', callback_data='add_valakas_thursday')
        button_fri = types.InlineKeyboardButton(text='–ø—è—Ç–Ω–∏—Ü–∞', callback_data='add_valakas_friday')
        button_sat = types.InlineKeyboardButton(text='—Å—É–±–±–æ—Ç–∞', callback_data='add_valakas_saturday')
        button_sun = types.InlineKeyboardButton(text='–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', callback_data='add_valakas_sunday')
        keyboard = types.InlineKeyboardMarkup(row_width=3).add(button_mon, button_tue, button_wed,
                                                               button_thu, button_fri, button_sat,
                                                               button_sun).row(button_back)
        await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞:\n ',
                                               reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas_day: {e}')


# SAVE VALAKAS DAY
@dp.callback_query_handler(lambda c: c.data.startswith('add_valakas_'))
async def save_valakas_day(callback_query: types.CallbackQuery):
    try:
        day_valakas = None
        session = Session()

        user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()

        option_setting = session.query(EssenceCustomSetting).filter_by(id_user=callback_query.from_user.id).first()
        if callback_query.data == 'add_valakas_monday':
            option_setting.valakas_day = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
            session.commit()
            day_valakas = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        elif callback_query.data == 'add_valakas_tuesday':
            option_setting.valakas_day = '–≤—Ç–æ—Ä–Ω–∏–∫'
            session.commit()
            day_valakas = '–≤—Ç–æ—Ä–Ω–∏–∫'
        elif callback_query.data == 'add_valakas_wednesday':
            option_setting.valakas_day = '—Å—Ä–µ–¥–∞'
            session.commit()
            day_valakas = '—Å—Ä–µ–¥–∞'
        elif callback_query.data == 'add_valakas_thursday':
            option_setting.valakas_day = '—á–µ—Ç–≤–µ—Ä–≥'
            session.commit()
            day_valakas = '—á–µ—Ç–≤–µ—Ä–≥'
        elif callback_query.data == 'add_valakas_friday':
            option_setting.valakas_day = '–ø—è—Ç–Ω–∏—Ü–∞'
            session.commit()
            day_valakas = '–ø—è—Ç–Ω–∏—Ü–∞'
        elif callback_query.data == 'add_valakas_saturday':
            option_setting.valakas_day = '—Å—É–±–±–æ—Ç–∞'
            session.commit()
            day_valakas = '—Å—É–±–±–æ—Ç–∞'
        elif callback_query.data == 'add_valakas_sunday':
            option_setting.valakas_day = '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            session.commit()
            day_valakas = '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'

        user.upd_date = datetime.today()
        session.commit()

        session.close()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–µ–Ω—å –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞ - {day_valakas}',
                                      reply_markup=keyboard)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_valakas_day: {e}')


# CANCEL SET VALAKAS DAY
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_valakas')
async def cancel_to_set_valakas_day(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas_day: {e}')


# REMOVE VALAKAS TIME AND DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_valakas'))
async def remove_valakas(callback_query: types.CallbackQuery):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
        option_setting.valakas_time = None
        option_setting.valakas_day = None

        session.commit()
        session.close()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –•—Ä–∞–º–µ –í–∞–ª–∞–∫–∞—Å–∞ —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_valakas: {e}')


# SELECT USER WITH TRUE SETTING
async def valakas_notification_wrapper():
    try:
        session = Session()
        users = session.query(User).all()

        for user in users:
            option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            if option and option.valakas_time and option.valakas_day:
                await valakas_notification(user)
        session.close()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ valakas_notification_wrapper: {e}')


# SEND VALAKAS MESSAGE
async def valakas_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')
        today = datetime.now().strftime('%A').lower()

        session = Session()
        option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
        session.close()

        valakas_day = option.valakas_day.lower() if option.valakas_day else None
        if valakas_day and today != valakas_day:
            return

        valakas_time = option.valakas_time if option.valakas_time else None
        if valakas_time and now != valakas_time:
            return

        try:
            await mybot.send_message(user.telegram_id,
                                     '–•—Ä–∞–º –í–∞–ª–∞–∫–∞—Å–∞ –∂–¥–µ—Ç —Å–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤. '
                                     '–°–∫–æ—Ä–µ–µ —Å–æ–±–∏—Ä–∞–π –¶–¶ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ê–¥–µ–Ω –∫ –§–æ–Ω—Ç–∞–Ω—É.')
            print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –•—Ä–∞–º–µ –í–∞–ª–∞–∫–∞—Å–∞')
        except BotBlocked:
            print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ valakas_notification: {e}')
