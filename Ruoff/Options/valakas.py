import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import RuoffCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN
from aiogram.utils.exceptions import BotBlocked
from aiocron import crontab
from Commands.options import options_menu_text
import locale
import logging

locale.setlocale(locale.LC_ALL, 'ru_RU')
logging.basicConfig(filename='Lineage2Notification.log', level=logging.INFO)


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class ValakasDay(StatesGroup):
    waiting_for_valakas_day = State()


class ValakasTime(StatesGroup):
    waiting_for_valakas_time = State()


# dream buttons
inline_valakas_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_valakas')
button_set_day = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å', callback_data='ruoff_option_set_day_valakas')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_valakas')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_valakas')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_valakas')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_valakas')

inline_valakas_buttons.add(button_set, button_remove)


# VALAKAS TEMPLE SETTINGS
@dp.message_handler(commands=['valakas'])
async def about_valakas(message: types.Message):
    try:
        now = datetime.now().strftime('%H:%M:%S')
        logging.info(f' [VALAKAS] {now}: {message.from_user.id} - {message.from_user.username} used /valakas')
        session = Session()

        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
        if not option_setting:
            option = RuoffCustomSetting(id_user=user.telegram_id)
            session.add(option)
            session.commit()
            logging.info(f' [VALAKAS] {now}: {message.from_user.id} - {message.from_user.username} add custom_settings')
        session.close()

        text = '–•—Ä–∞–º –í–∞–ª–∞–∫–∞—Å–∞ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –æ—Ö–æ—Ç—ã –¥–ª—è 15+ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'\
               ' –æ—Ç 76 —É—Ä–æ–≤–Ω—è –∏ –≤—ã—à–µ. –ó–∞ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –•—Ä–∞–º –í–∞–ª–∞–∫–∞—Å–∞'\
               ' –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–±–∏—Ç—å —Ç—Ä–µ—Ö –±–æ—Å—Å–æ–≤: –ò—Ñ—Ä–∏—Ç, –ò—Ñ—Ä–∏–Ω –∏ –ò—Ñ.\n'\
               '\n'\
               '–ò–∑ –¥—Ä–æ–ø–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–∞–¥–µ–Ω–∏–µ:\n'\
               '- –°–≤–∏—Ç–∫–∏ –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è –Ω–∞ –¥–æ—Å–ø–µ—Ö –∏ –æ—Ä—É–∂–∏–µ\n'\
               '- –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–∫–ª—è—Ç—ã–µ —Å–≤–∏—Ç–∫–∏ –Ω–∞ –æ—Ä—É–∂–∏–µ –∏ –¥–æ—Å–ø–µ—Ö–∏\n'\
               '- –ö–∞–º–Ω–∏ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Ä—É–∂–∏–µ/–¥–æ—Å–ø–µ—Ö/–∞–∫—Å–µ—Å—Å—É–∞—Ä'\
               '- –¢–∞–±–ª–∏—á–∫–∏\n'\
               '- –¢–û–ü –ê –¥–æ—Å–ø–µ—Ö–∏ –∏ –æ—Ä—É–∂–∏–µ\n'\
               '\n'\
               '–ê –≤ –∫–æ–Ω—Ü–µ —Å —à–∞–Ω—Å–æ–º –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ü—ã–ª–∞—é—â–∏–π –î—Ä–∞–∫–æ–Ω, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∞–¥–∞—é—Ç –∫–Ω–∏–≥–∏ (–∏ –¥–∞–∂–µ 4****)'

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_valakas_buttons)

    except Exception as e:
        logging.error(f' [VALAKAS] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_valakas: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_valakas: {e}')


# SELECT MENU FOR VALAKAS TIME AND DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_valakas'))
async def set_valakas(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_day, button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞ üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logging.error(f' [VALAKAS] {callback_query.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas: {e}')


# CANCEL MENU VALAKAS TIME AND DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_valakas'))
async def cancel_to_set_valakas(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        logging.error(f' [VALAKAS] {callback_query.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas: {e}')


# INPUT VALAKAS TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_valakas'))
async def set_valakas_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await ValakasTime.waiting_for_valakas_time.set()
        await callback_query.answer()

    except Exception as e:
        logging.error(f' [VALAKAS] {callback_query.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas_time: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_valakas_time: {e}')


# SAVE VALAKAS TIME
@dp.message_handler(state=ValakasTime.waiting_for_valakas_time)
async def save_valakas_time(message: types.Message, state: FSMContext):
    try:
        valakas_time = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(valakas_time) == 5 and valakas_time[:2] in hours and valakas_time[2] == ':' \
                and valakas_time[3:5] in minutes:
            session = Session()

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

            option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.valakas_time = valakas_time
            session.commit()

            user.upd_date = datetime.today()
            session.commit()

            session.close()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_day, button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –•—Ä–∞–º –í–∞–ª–∞–∫–∞—Å–∞ - {valakas_time}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        logging.error(f' [VALAKAS] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_valakas_time: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_valakas_time: {e}')


# CANCEL SET VALAKAS TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_valakas',
                           state=ValakasTime.waiting_for_valakas_time)
async def cancel_to_set_valakas_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        logging.error(f' [VALAKAS] {callback_query.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas_time: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_valakas_time: {e}')


# INPUT VALAKAS DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_day_valakas'))
async def set_valakas_day(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        await callback_query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –•—Ä–∞–º–∞ –í–∞–ª–∞–∫–∞—Å–∞:\n '
                                               '[ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ | –≤—Ç–æ—Ä–Ω–∏–∫ | —Å—Ä–µ–¥–∞ | —á–µ—Ç–≤–µ—Ä–≥ | –ø—è—Ç–Ω–∏—Ü–∞ | —Å—É–±–±–æ—Ç–∞ | '
                                               '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ]',
                                               reply_markup=keyboard)
        await ValakasDay.waiting_for_valakas_day.set()
        await callback_query.answer()

    except Exception as e:
        logging.error(f' [VALAKAS] {callback_query.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set__day: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[VALAKAS] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_dream_day: {e}')


# SAVE DREAM DAY
@dp.message_handler(state=DreamDay.waiting_for_dream_day)
async def save_dream_day(message: types.Message, state: FSMContext):
    try:
        dream_day = message.text
        days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

        if dream_day.lower() in days:
            session = Session()

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

            option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.dream_day = dream_day
            session.commit()

            user.upd_date = datetime.today()
            session.commit()

            session.close()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–µ–Ω—å –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ü–æ–¥–∑–µ–º–µ–ª—å–µ –ì—Ä—ë–∑ - {dream_day}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        logging.error(f' [DREAM] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_dream_day: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[DREAM] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_dream_day: {e}')


# CANCEL SET DREAM DAY
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_dream',
                           state=DreamDay.waiting_for_dream_day)
async def cancel_to_set_dream_day(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        logging.error(f' [DREAM] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_dream_day: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[DREAM] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_dream_day: {e}')


# REMOVE DREAM TIME AND DAY
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_dream'))
async def remove_dream(callback_query: types.CallbackQuery):
    try:
        session = Session()

        user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
        option_setting = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
        option_setting.dream_time = None
        option_setting.dream_day = None

        session.commit()
        session.close()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ü–æ–¥–∑–µ–º–µ–ª—å–µ –ì—Ä—ë–∑ —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        logging.error(f' [DREAM] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_dream: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[DREAM] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_dream: {e}')


# SELECT USER WITH TRUE SETTING
async def dream_notification_wrapper():
    try:
        session = Session()
        users = session.query(User).all()

        for user in users:
            option = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
            if option and option.dream_time and option.dream_day:
                await dream_notification(user)
        session.close()

    except Exception as e:
        logging.error(f' [DREAM] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ dream_notification_wrapper: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[DREAM] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ dream_notification_wrapper: {e}')


# SEND DREAM MESSAGE
async def dream_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')
        today = datetime.now().strftime('%A').lower()

        session = Session()
        option = session.query(RuoffCustomSetting).filter_by(id_user=user.telegram_id).first()
        session.close()

        dream_day = option.dream_day.lower() if option.dream_day else None
        if dream_day and today != dream_day:
            return

        dream_time = option.dream_time if option.dream_time else None
        if dream_time and now != dream_time:
            return

        try:
            await mybot.send_message(user.telegram_id,
                                     '–ü–æ–¥–∑–µ–º–µ–ª—å–µ –ì—Ä—ë–∑ –∂–¥–µ—Ç —Å–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤. '
                                     '–°–∫–æ—Ä–µ–µ —Å–æ–±–∏—Ä–∞–π –ø–∞—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ê–¥–µ–Ω –∫ –§–æ–Ω—Ç–∞–Ω—É')
            print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ü–æ–¥–∑–µ–º–µ–ª—å–µ –ì—Ä—ë–∑')
        except BotBlocked:
            print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        logging.error(f' [DREAM] {message.from_user.id} - –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ dream_notification: {e}')
        await mybot.send_message(chat_id='952604184',
                                 text=f'[DREAM] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ dream_notification: {e}')
