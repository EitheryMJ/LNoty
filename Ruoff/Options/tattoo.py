import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import EssenceCustomSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN, test_token
from aiogram.utils.exceptions import BotBlocked
from Commands.options import options_menu_text
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU')


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot, storage=MemoryStorage())

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


class TattooTime(StatesGroup):
    waiting_for_tattoo_time = State()


# tattoo buttons
inline_tattoo_buttons = types.InlineKeyboardMarkup()

button_set = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_set_tattoo')
button_set_time = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='ruoff_option_set_time_tattoo')
button_remove = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_option_remove_tattoo')

button_back = types.InlineKeyboardButton(text='<< —Ä–µ–∑–∫–æ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è',
                                         callback_data='ruoff_option_cancel_to_set_tattoo')
button_menu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
                                         callback_data='ruoff_option_cancel_to_set_tattoo')

inline_tattoo_buttons.add(button_set, button_remove)


# tattoo SETTINGS
@dp.message_handler(commands=['tattoo'])
async def about_tattoo(message: types.Message):
    try:
        with Session() as session:

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            if not option_setting:
                option = EssenceCustomSetting(id_user=user.telegram_id)
                session.add(option)
                session.commit()

        text = '–ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É–∑–æ—Ä–∞ –∏ –ø—Ä–æ–∫–∞—á–∫–∞ —Å–∫—Ä—ã—Ç–æ–π —Å–∏–ª—ã - —Ä—É—Ç–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ—Å–ª–∞–±–æ –±—É—Å—Ç–∏—Ç –≤–Ω—É—Ç—Ä—è–Ω–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. '\
               '–ü—Ä–æ–∫–∞—á–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ —Å—á–µ—Ç –£—Å–∏–ª–∏—Ç–µ–ª—è –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã, –±—é–¥–∂–µ—Ç–Ω–æ –º–æ–∂–Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–∫—É–ø–∞—Ç—å 3—à—Ç '\
               '–∑–∞ 3–∫–∫ –∞–¥–µ–Ω—ã –≤ L –º–∞–≥–∞–∑–∏–Ω–µ. –° –º–∏—Ä—É –ø–æ –Ω–∏—Ç–∫–µ –≤—Å–µ –æ–¥–Ω–∞–∂–¥—ã –±—É–¥—É—Ç —Å 20-—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º, –∫–µ–∫.'

        await mybot.send_message(chat_id=message.from_user.id,
                                 text=text,
                                 reply_markup=inline_tattoo_buttons)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ about_tattoo: {e}')


# SELECT MENU FOR tattoo TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_tattoo'))
async def set_tattoo(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_set_time, button_back)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–°–µ–π—á–∞—Å –≤—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ü—Ä–æ–∫–∞—á–∫–∏ –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã üßê',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_tattoo: {e}')


# CANCEL MENU tattoo TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_cancel_to_set_tattoo'))
async def cancel_to_set_tattoo(callback_query: types.CallbackQuery):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_tattoo: {e}')


# INPUT tattoo TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_set_time_tattoo'))
async def set_tattoo_time(callback_query: types.CallbackQuery):
    try:
        keyboard = types.InlineKeyboardMarkup().add(button_back)
        text = f'–ù–ê–ü–ò–®–ò–¢–ï –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ü—Ä–æ–∫–∞—á–∫–∏ –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:21 –∏–ª–∏ 01:24): '
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=text,
                                      reply_markup=keyboard)

        await TattooTime.waiting_for_tattoo_time.set()
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_tattoo_time: {e}')


# SAVE tattoo TIME
@dp.message_handler(state=TattooTime.waiting_for_tattoo_time)
async def save_tattoo_time(message: types.Message, state: FSMContext):
    try:
        tattoo = message.text
        hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                 '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
        minutes = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
        for h in range(10, 61):
            minutes.append(str(h))

        if len(tattoo) == 5 and tattoo[:2] in hours and tattoo[2] == ':' and tattoo[3:5] in minutes:
            with Session() as session:

                user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
                option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
                option_setting.tattoo = tattoo
                session.commit()
    
                user.upd_date = datetime.today()
                session.commit()

            keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

            await mybot.send_message(chat_id=message.from_user.id,
                                     text=f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ü—Ä–æ–∫–∞—á–∫–∏ –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã - {tattoo}',
                                     reply_markup=keyboard)

        else:
            await mybot.send_message(chat_id=message.from_user.id,
                                     text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return

        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_tattoo_time: {e}')


# CANCEL SET tattoo TIME
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'ruoff_option_cancel_to_set_tattoo',
                           state=TattooTime.waiting_for_tattoo_time)
async def cancel_to_set_tattoo_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await mybot.answer_callback_query(callback_query.id)
        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text=options_menu_text)
        await state.finish()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {callback_query.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cancel_to_set_tattoo_time: {e}')


# REMOVE tattoo TIME
@dp.callback_query_handler(filters.Text(contains='ruoff_option_remove_tattoo'))
async def remove_tattoo(callback_query: types.CallbackQuery):
    try:
        with Session() as session:

            user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
            option_setting = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
            option_setting.tattoo = None
    
            session.commit()

        keyboard = types.InlineKeyboardMarkup(row_width=2).add(button_menu)

        await mybot.edit_message_text(chat_id=callback_query.from_user.id,
                                      message_id=callback_query.message.message_id,
                                      text='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ü—Ä–æ–∫–∞—á–∫–∏ –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã —É–±—Ä–∞–Ω–æ',
                                      reply_markup=keyboard)
        await callback_query.answer()

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_tattoo: {e}')


# SELECT USER WITH TRUE SETTING
async def tattoo_notification_wrapper():
    try:
        with Session() as session:
            users = session.query(User).all()
    
            for user in users:
                option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()
                if option and option.tattoo:
                    await tattoo_notification(user)

    except Exception as e:
        await mybot.send_message(chat_id='952604184',
                                 text=f'[tattoo] {message.from_user.id} - '
                                      f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ tattoo_notification_wrapper: {e}')


# SEND tattoo MESSAGE
async def tattoo_notification(user: User):
    try:
        now = datetime.now().strftime('%H:%M')

        with Session() as session:
            option = session.query(EssenceCustomSetting).filter_by(id_user=user.telegram_id).first()

        tattoo = option.tattoo if option.tattoo else None
        # –µ—Å–ª–∏ –Ω–µ –≤—Ä–µ–º—è –∏ –Ω–µ –º–µ—Å—Ç–æ
        if tattoo and now != tattoo:
            return      
                
        # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
        elif tattoo and now == tattoo:
            try:
                await mybot.send_message(
                    user.telegram_id,
                    '–ö—É–ø–∏ –£—Å–∏–ª–∏—Ç–µ–ª—å –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã –≤ L –º–∞–≥–∞–∑–∏–Ω–µ –∏ —Å—Ç–∞–Ω—å –Ω–∞ –ø–æ–ª—à–∏—à–µ—á–∫–∏ —Å–∏–ª—å–Ω–µ–µ'
                )
                print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ü—Ä–æ–∫–∞—á–∫–µ –°–∫—Ä—ã—Ç–æ–π –°–∏–ª—ã')
            except BotBlocked:
                print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)

    except Exception as e:
        await mybot.send_message(
            chat_id='952604184',
            text=f'[tattoo] {message.from_user.id} - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ tattoo_notification: {e}'
        )
