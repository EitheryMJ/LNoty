import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import Setting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN
from aiogram.utils.exceptions import BotBlocked


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot)

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

inline_rescue_buttons = types.InlineKeyboardMarkup()

b1 = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_setevent')
b2 = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_removeevent')

inline_rescue_buttons.add(b1, b2)


@dp.message_handler(commands=['event'])
async def about_event(message: types.Message):
    await message.answer('–°–ø–∞—Å–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤ - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å 23 –∞–≤–≥—É—Å—Ç–∞ –¥–æ 6 —Å–µ–Ω—Ç—è–±—Ä—è.'
                         ' –î–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å –≤ –ó–∞–≥–æ–Ω–µ –î–∏–∫–∏—Ö –ó–≤–µ—Ä–µ–π –ø—Ä–æ–≤–æ–¥–æ–∏—Ç—Å—è —Ä–µ–π–¥ –Ω–∞ –ì–ª–∞–≤–Ω—ã—Ö –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤'
                         ' –≤ 11:00 –∏ 21:00.\n'
                         '–í –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–¥–∞—Ä –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:\n'
                         '- –®–∫–∞—Ç—É–ª–∫–∞ —Å —Å–∞–º–æ—Ü–≤–µ—Ç–æ–º 5—É—Ä\n'
                         '- –°—É–Ω–¥—É–∫ —Å –ø—Ä–∏–∫–æ–ª—é—Ö–∞–º–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞\n'
                         '–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–ª–æ–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —à–∞–Ω—Å–æ–º –∏ —Ä–∞—Å—Ö–æ–¥–∫—É –Ω–∞ –Ω–µ–≥–æ.',
                         reply_markup=inline_rescue_buttons)


@dp.callback_query_handler(filters.Text(contains='ruoff_setevent'))
async def set_event(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
    setting.event = True

    session.commit()

    user.upd_date = datetime.today()
    session.commit()

    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='ruoff_removeevent'))
async def remove_event(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
    setting.event = False

    session.commit()

    user.upd_date = datetime.today()
    session.commit()

    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ —É–±—Ä–∞–Ω–æ')
    await callback_query.answer()


async def rescue_notification_wrapper():
    session = Session()
    users = session.query(User).all()
    for user in users:
        setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
        if setting.event is True:
            await rescue_notification(user)
    session.close()


async def rescue_notification(user: User):
    now = datetime.now().strftime('%H:%M')
    try:
        if now == '10:56' or now == '20:56':
            await mybot.send_message(user.telegram_id, 'ü¶äü¶ä –°–ø–∞—Å–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã')
            print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ')
        else:
            print(now, '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–≤–µ–Ω—Ç–∞')
    except BotBlocked:
        print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)
