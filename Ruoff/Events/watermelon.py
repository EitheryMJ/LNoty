import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import EssenceSetting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot)

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

inline_watermelon_buttons = types.InlineKeyboardMarkup()

b1 = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoffsetevent')
b2 = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoffremoveevent')

inline_watermelon_buttons.add(b1, b2)

# Watermelon - 12.07.23 - 02.08.23
# –ê—Ä–±—É–∑–Ω—ã–π —Å–µ–∑–æ–Ω - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å 12 –∏—é–ª—è –¥–æ 2 –∞–≤–≥—É—Å—Ç–∞.
# –î–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å –Ω–∞ –û—Å—Ç—Ä–æ–≤–µ –ì—Ä—ë–∑ –º–æ–∂–Ω–æ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö –ê—Ä–±—É–∑–æ–≤ –∏ –°–Ω–µ–∂–Ω—ã—Ö –¢—ã–∫–≤
# –≤ 11:00 –∏ 21:00. –í –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–¥–∞—Ä –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:
# - –ö—É–ø–æ–Ω –Ω–∞ –∫–Ω–∏–≥—É 3*
# - –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–∫–ª—è—Ç—ã–µ —Å–≤–∏—Ç–∫–∏ –ê —Ä–∞–Ω–≥–∞
# - –ö—É–∫–ª—ã 1–≥–æ –∏ 2–≥–æ —É—Ä–æ–≤–Ω—è


@dp.message_handler(commands=['event'])
async def about_event(message: types.Message):
    await message.answer('–ê—Ä–±—É–∑–Ω—ã–π —Å–µ–∑–æ–Ω - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å 12 –∏—é–ª—è –¥–æ 2 –∞–≤–≥—É—Å—Ç–∞.'
                         ' –î–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å –Ω–∞ –û—Å—Ç—Ä–æ–≤–µ –ì—Ä—ë–∑ –º–æ–∂–Ω–æ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö –ê—Ä–±—É–∑–æ–≤ –∏ –°–Ω–µ–∂–Ω—ã—Ö –¢—ã–∫–≤'
                         ' –≤ 11:00 –∏ 21:00.\n'
                         '–í –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–¥–∞—Ä –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:\n'
                         '- –ö—É–ø–æ–Ω –Ω–∞ –∫–Ω–∏–≥—É 3*\n'
                         '- –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–∫–ª—è—Ç—ã–µ —Å–≤–∏—Ç–∫–∏ –ê —Ä–∞–Ω–≥–∞\n'
                         '- –ö—É–∫–ª—ã 1–≥–æ –∏ 2–≥–æ —É—Ä–æ–≤–Ω—è', reply_markup=inline_watermelon_buttons)


@dp.callback_query_handler(filters.Text(contains='ruoffsetevent'))
async def set_event(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(EssenceSetting).filter_by(id_user=user.telegram_id).first()
    setting.event = True

    session.commit()
    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='ruoffremoveevent'))
async def remove_event(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(EssenceSetting).filter_by(id_user=user.telegram_id).first()
    setting.event = False

    session.commit()
    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ —É–±—Ä–∞–Ω–æ')
    await callback_query.answer()


async def watermelon_notification_wrapper():
    session = Session()
    users = session.query(User).all()
    for user in users:
        setting = session.query(EssenceSetting).filter_by(id_user=user.telegram_id).first()
        if setting.event is True:
            await watermelon_notification(user)
    session.close()


async def watermelon_notification(user: User):
    now = datetime.now().strftime('%H:%M')
    if now == '10:56' or now == '20:56':
        await mybot.send_message(user.telegram_id, 'üçâüçâ –ê—Ä–±—É–∑–Ω—ã–π —Å–µ–∑–æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã')
        print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ')
    else:
        print(now, '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–≤–µ–Ω—Ç–∞')
