import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import Setting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN
from aiogram.utils.exceptions import BotBlocked


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot)

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

inline_event_buttons = types.InlineKeyboardMarkup()

b1 = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_set_event')
b2 = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoff_remove_event')

inline_event_buttons.add(b1, b2)


@dp.message_handler(commands=['event'])
async def about_event(message: types.Message):
    await message.answer('–ó–æ–≤ –ì—Ä–æ–±–Ω–∏—Ü—ã - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å 27 —Å–µ–Ω—Ç—è–±—Ä—è –¥–æ 18 –æ–∫—Ç—è–±—Ä—è.'
                         ' –ü–æ–ø–∞—Å—Ç—å –≤ –ì—Ä–æ–±–Ω–∏—Ü—É –î—Ä–µ–≤–Ω–∏—Ö –ü–∏—Ä–∞—Ç–æ–≤ –º–æ–∂–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏'
                         ' 80+ —É—Ä–æ–≤–Ω—è –≤ —Å–æ—Å—Ç–∞–≤–µ –ø–∞—Ç–∏.\n'
                         '–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è - 21:05 (–º–µ–∂–¥—É –≤–∞–ª–ª–æ–∫–æ–º –∏ –æ–ª–∏–º–ø–æ–º)\n'
                         '\n'
                         '–ó–∞ 20 –º–∏–Ω—É—Ç –≤ –ì—Ä–æ–±–Ω–∏—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n'
                         '- –•–æ—Ä–æ—à–∏–π –æ–ø—ã—Ç, –º–æ–∂–Ω–æ —Å—Ç–æ—è—Ç—å –∏ –∫–∞—á–∞—Ç—å—Å—è\n'
                         '- –î—Ä–µ–≤–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (100—à—Ç –¥—Ä–æ–ø–æ–º, 200—à—Ç –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã)\n'
                         '–ó–∞ –¥—Ä–µ–≤–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ —Å–ª–µ–≥–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é',
                         reply_markup=inline_event_buttons)


@dp.callback_query_handler(filters.Text(contains='ruoff_set_event'))
async def set_event(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
    setting.event = True

    session.commit()

    user.upd_date = datetime.today()
    session.commit()

    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='ruoff_remove_event'))
async def remove_event(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
    setting.event = False

    session.commit()

    user.upd_date = datetime.today()
    session.commit()

    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ —É–±—Ä–∞–Ω–æ')
    await callback_query.answer()


async def tomb_notification_wrapper():
    session = Session()
    users = session.query(User).all()
    for user in users:
        setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
        if setting.event is True:
            await tomb_notification(user)
    session.close()


async def tomb_notification(user: User):
    now = datetime.now().strftime('%H:%M')
    try:
        if now == '21:00':
            await mybot.send_message(user.telegram_id, 'üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –í–ø–µ—Ä–µ–¥, –Ω–∞ –±–∏—Ç–≤—É —Å –ø–∏—Ä–∞—Ç–∞–º–∏! –í—Ö–æ–¥ —É –ù–ü–° –î–µ–ª–ª–æ—Å')
            print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ')
        else:
            print(now, '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–≤–µ–Ω—Ç–∞')
    except BotBlocked:
        print('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞:', now, user.telegram_id, user.username)
