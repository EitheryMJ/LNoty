import asyncio
from aiogram import Bot, Dispatcher, executor, types, filters
from datetime import datetime
from DataBase.User import User
from DataBase.Base import Base
from DataBase.Ruoff import Setting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot)

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

# purge buttons
inline_purge_buttons = types.InlineKeyboardMarkup()

b22 = types.InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoffsetpurge')
b23 = types.InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='ruoffremovepurge')

inline_purge_buttons.add(b22, b23)


# PURGE SETTINGS
@dp.message_handler(commands=['purge'])
async def about_purge(message: types.Message):
    await message.answer('–ó–∞—á–∏—Å—Ç–∫–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
                         reply_markup=inline_purge_buttons)


@dp.callback_query_handler(filters.Text(contains='ruoffsetpurge'))
async def set_purge(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
    setting.purge = True

    session.commit()
    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –∑–∞—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='ruoffremovepurge'))
async def remove_purge(callback_query: types.CallbackQuery):
    session = Session()

    user = session.query(User).filter_by(telegram_id=callback_query.from_user.id).first()
    setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
    setting.purge = False

    session.commit()
    session.close()

    await callback_query.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –∑–∞—á–∏—Å—Ç–∫–∏ —É–±—Ä–∞–Ω–æ')
    await callback_query.answer()


async def purge_notification_wrapper():

    session = Session()
    users = session.query(User).all()

    for user in users:
        setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
        if setting.purge is True:
            await purge_notification(user)
    session.close()


async def purge_notification(user: User):
    now = datetime.now().strftime('%H:%M')
    if now == '22:50':
        await mybot.send_message(user.telegram_id, 'üçæ –°–∫–æ—Ä–µ–µ —Å–æ–±–µ—Ä–∏—Ç–µ –ó–∞—á–∏—Å—Ç–∫—É :)')
        print(now, user.telegram_id, user.username, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —Å–±–æ—Ä–µ –ó–∞—á–∏—Å—Ç–∫–µ')
    else:
        print(now, '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–±–æ—Ä–∞ –ó–∞—á–∏—Å—Ç–∫–∏')
