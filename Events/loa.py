import asyncio
from aiogram import types, Bot, Dispatcher
from datetime import datetime
from models import User, Base, Setting
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import DB_URL, TOKEN


mybot = Bot(token=TOKEN)
dp = Dispatcher(mybot)

engine = create_engine(DB_URL)

Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)


async def loa_notification_wrapper():

    session = Session()
    users = session.query(User).all()
    for user in users:
        now = datetime.now().strftime('%H:%M')
        setting = session.query(Setting).filter_by(id_user=user.telegram_id).first()
        if setting.loa is True:
            print(now, user.telegram_id, '–ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —É—Å–ª–æ–≤–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –õ–æ–≥–æ–≤–∞ –ê–Ω—Ç–∞—Ä–∞—Å–∞')
            await loa_notification(user)
    session.close()


async def loa_notification(user: User):
    now = datetime.now().strftime('%H:%M')
    if now == '17:55':
        await mybot.send_message(user.telegram_id, 'üî•üî• –õ–æ–≥–æ–≤–æ –ê–Ω—Ç–∞—Ä–∞—Å–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç')
        print(now, user.telegram_id, '–ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –õ–æ–≥–æ–≤–µ –ê–Ω—Ç–∞—Ä–∞—Å–∞')
    else:
        print(now, '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –õ–æ–≥–æ–≤–∞ –ê–Ω—Ç–∞—Ä–∞—Å–∞')
